name: Deploy Terraform + Ansible PREFECT GCP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (dev, prod)"
        required: true
        default: dev

permissions:
  contents: read
  id-token: write

jobs:
  security:
    name: Security SSH Key
    runs-on: ubuntu-latest
    outputs:
      ssh_public_key: ${{ steps.generate_ssh_key.outputs.ssh_public_key }}
      ssh_private_key_b64: ${{ steps.generate_ssh_key.outputs.ssh_private_key_b64 }}
    steps:
      - name: Generar clave SSH temporal
        id: generate_ssh_key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "gha@runner"

          # Exportar clave pública
          echo "ssh_public_key=$(cat ~/.ssh/id_rsa.pub)" >> $GITHUB_OUTPUT

          # Exportar clave privada codificada en base64
          PRIVATE_KEY_B64=$(base64 -w 0 ~/.ssh/id_rsa)
          echo "ssh_private_key_b64=$PRIVATE_KEY_B64" >> $GITHUB_OUTPUT

      - name: Verificar variable ssh_public_key
        run: |
          echo "${{ steps.generate_ssh_key.outputs.ssh_public_key }}"

      - name: Verificar variable ssh_private_key
        run: |
          echo "${{ steps.generate_ssh_key.outputs.ssh_private_key }}"

  terraform:
    name: Terraform Apply Prefect
    runs-on: ubuntu-latest
    needs: security
    environment:
      name: Development

    defaults:
      run:
        shell: bash
        working-directory: terraform/envs/${{ github.event.inputs.environment }}
    outputs:
      postgresql_ip: ${{ steps.get_ip_postgresql.outputs.ip }}
      prefect_ip: ${{ steps.get_ip_prefect.outputs.ip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Verify GCP secret is available
        run: |
          if [ -z "${{ secrets.GCP_CREDENTIALS }}" ]; then
            echo "Secret missing!"
            exit 1
          else
            echo "Secret available"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
          export_environment_variables: true

      - name: Crear archivo terraform.tfvars desde script (más seguro)
        run: |
          cat > write_tfvars.sh <<'EOF'
          #!/bin/bash
          {
            echo "project        = \"$GCP_PROJECT\""
            echo "region         = \"$GCP_REGION\""
            echo "zone           = \"$GCP_ZONE\""
            echo "ssh_public_key = \"$SSH_PUBLIC_KEY\""
          } > terraform.tfvars
          EOF
          chmod +x write_tfvars.sh
          ./write_tfvars.sh
        env:
          GCP_PROJECT: ${{ vars.GCP_PROJECT }}
          GCP_REGION: ${{ vars.GCP_REGION }}
          GCP_ZONE: ${{ vars.GCP_ZONE }}
          SSH_PUBLIC_KEY: ${{ needs.security.outputs.ssh_public_key }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -recursive
#        env:
#          TF_LOG: DEBUG

      - name: Terraform Plan
        run: terraform plan
#        env:
#          TF_LOG: DEBUG

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve
#        env:
#          TF_LOG: DEBUG

      - name: Obtener IP pública postgresql
        id: get_ip_postgresql
        run: |
          echo "ip=$(terraform output -raw postgresql_public_ip)" >> $GITHUB_OUTPUT

      - name: Obtener IP pública prefect
        id: get_ip_prefect
        run: |
          echo "ip=$(terraform output -raw prefect_public_ip)" >> $GITHUB_OUTPUT

      - name: Verificar IP obtenida
        run: |
          echo "La IP pública de PostgreSQL es: $postgresql_public_ip"
          echo "La IP pública de Prefect es: $prefect_public_ip"

  ansible:
    name: Ansible Deploy PostgreSQL
    runs-on: ubuntu-latest
    needs: [security, terraform]
    environment:
      name: Development

    defaults:
      run:
        working-directory: ansible

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Agregar SSH private key correctamente
        run: |
          mkdir -p ~/.ssh
          echo "${{ needs.security.outputs.ssh_private_key_b64 }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Validar contenido de la clave
        run: |
            echo "Base64 key length: ${#${{ needs.security.outputs.ssh_private_key_b64 }}}"

      - name: Debug key file
        run: |
          file ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa | head -n 20

      - name: Generar inventory.ini
        run: |
          echo "[postgresql]" > inventory.ini
          echo "vm-postgresql ansible_host=${{ needs.terraform.outputs.postgresql_ip }} ansible_user=debian ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini
          echo "[prefect]" >> inventory.ini
          echo "vm-prefect ansible_host=${{ needs.terraform.outputs.prefect_ip }} ansible_user=debian ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Mostrar contenido de inventory.ini
        run: cat inventory.ini
        working-directory: ansible

      - name: Agregar IP a known_hosts 
        run: |
          for i in {1..5}; do
            ssh-keyscan -H ${{ needs.terraform.outputs.postgresql_ip  }} >> ~/.ssh/known_hosts && break
            echo "Reintentando... ($i)"
            sleep 5
          done
          for i in {1..5}; do
            ssh-keyscan -H ${{ needs.terraform.outputs.prefect_ip  }} >> ~/.ssh/known_hosts && break
            echo "Reintentando... ($i)"
            sleep 5
          done

      - name: Instalar Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Mostrar contenido
        run: ls -lh
        working-directory: ansible

      - name: Listar roles disponibles
        run: ls -R roles

      - name: Verificar existencia de tareas
        run: |
         cat roles/postgresql/tasks/main.yml
         cat roles/prefect/tasks/main.yml

      - name: Ejecutar playbook Ansible
        run: ansible-playbook -i inventory.ini playbook.yml
